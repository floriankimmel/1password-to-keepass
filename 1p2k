#!/usr/bin/env bash
# This script was generated by bashly 1.0.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
1p2k_usage() {
  if [[ -n $long_usage ]]; then
    printf "1p2k - Sync your passwords from 1password to keepass\n"
    echo

  else
    printf "1p2k - Sync your passwords from 1password to keepass\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  1p2k COMMAND\n"
  printf "  1p2k [COMMAND] --help | -h\n"
  printf "  1p2k --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Sync all your password/username\n" "sync"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
1p2k_sync_usage() {
  if [[ -n $long_usage ]]; then
    printf "1p2k sync - Sync all your password/username\n"
    echo

  else
    printf "1p2k sync - Sync all your password/username\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  1p2k sync [OPTIONS]\n"
  printf "  1p2k sync --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--vault, -v VAULT"
    printf "    1password vault to sync\n"
    echo

    # :flag.usage
    printf "  %s\n" "--keepass-secret, -s KEEPASS-SECRET (required)"
    printf "    Name of the keepass secret in 1password\n"
    echo

    # :flag.usage
    printf "  %s\n" "--keepass-database, -k KEEPASS-DATABASE (required)"
    printf "    Keepass database to sync to\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
1p2k_sync_command() {
  # src/sync_command.sh
  vault=${args[--vault]}
  keepassDatabase=${args[--keepass-database]}
  keepassSecret=${args[--keepass-secret]}
  keepassPassword=$(op item get --vault $vault $keepassSecret --fields label=password)

  op item --vault $vault list --format json | jq -r '.[].title' | while IFS= read -r title; do
      if printf '%s\n' "$keepass" | keepassxc-cli search  $keepassDatabase "$title" 2>&1 | grep -q "No results for that search term"; then
          password=$(op item get --vault Podcast "$title" --format json | jq -r '.fields[] | select(.id == "credential" or .id == "password") | .value')
          username=$(op item get --vault Podcast "$title" --format json | jq -r '.fields[] | select(.id == "username") | .value')
          echo -e "\033[31m $title. Erstelle neuen Eintrag\033[0m"
          printf '%s\n%s' "$keepassPassword" "$password" | keepassxc-cli add $keepassDatabase --password-prompt "$title" --username $username

      else
          echo -e "\033[32m $title\033[0m"
      fi
  done

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        1p2k_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v keepassxc-cli >/dev/null 2>&1; then
    deps['keepassxc-cli']="$(command -v keepassxc-cli | head -n1)"
  else
    printf "missing dependency: keepassxc-cli\n" >&2
    printf "%s\n" "install by running: 'brew install keepassxc'" >&2
    exit 1
  fi

  if command -v op >/dev/null 2>&1; then
    deps['op']="$(command -v op | head -n1)"
  else
    printf "missing dependency: op\n" >&2
    printf "%s\n" "install by running: 'brew install 1password-cli'" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    sync | s)
      action="sync"
      shift
      1p2k_sync_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      1p2k_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
1p2k_sync_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        1p2k_sync_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="sync"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --vault | -v)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--vault']="$2"
          shift
          shift
        else
          printf "%s\n" "--vault requires an argument: --vault, -v VAULT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --keepass-secret | -s)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--keepass-secret']="$2"
          shift
          shift
        else
          printf "%s\n" "--keepass-secret requires an argument: --keepass-secret, -s KEEPASS-SECRET" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --keepass-database | -k)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--keepass-database']="$2"
          shift
          shift
        else
          printf "%s\n" "--keepass-database requires an argument: --keepass-database, -k KEEPASS-DATABASE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--keepass-secret']+x} ]]; then
    printf "missing required flag: --keepass-secret, -s KEEPASS-SECRET\n" >&2
    exit 1
  fi
  if [[ -z ${args['--keepass-database']+x} ]]; then
    printf "missing required flag: --keepass-database, -k KEEPASS-DATABASE\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="1.0.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "sync") 1p2k_sync_command ;;
  esac
}

initialize
run "$@"
